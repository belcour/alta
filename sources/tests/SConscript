import os, sys
from subprocess import call, Popen, STDOUT
from os.path import basename, splitext
import filecmp

import obtain

file_to_be_executed = Dir('#sources/tests').abspath + '/test_utilities.py'
exec( open(file_to_be_executed).read() )

Import('env', 'ALTA_LIBS', 'openexr_available', 'catch_available')
env = env.Clone()

have_catch = catch_available(env)
if not have_catch:
  print("<<WARNING>> Could not locate Catch : Tests using catch will not be built and launched")
  print("          Please use `git submodule init` and 'git submodule update` in external/Catch/")
  print("           to get Catch Framework")


have_openexr = openexr_available(env)
conf = Configure(env)
have_cppquickcheck = conf.CheckLibWithHeader('cppqc', 'cppqc.h', 'C++')
have_nonlinear_fitter_eigen = conf.CheckCXXHeader('unsupported/Eigen/LevenbergMarquardt')
env = conf.Finish()

# Add the directory of <tests.h> to the include path.
env.AppendUnique(CPPPATH = ['#sources/tests'])

env.Prepend(LIBS = ['core'])
env.AppendUnique(LIBS = ALTA_LIBS)

# Use this function to compare two fitting results
# Compare the norm of the fitting results not the coefficients
def check_fitting_files(fit_filename1, fit_filename2, name_of_the_norm, epsilon):
  def cmp_fitting_files(env, target, source):
    fit_info1 = read_brdf_fit_file(fit_filename1)
    fit_info2 = read_brdf_fit_file(fit_filename2)

    if fit_info1.has_key('--' + name_of_the_norm) and \
       fit_info2.has_key('--' + name_of_the_norm):

      fits_are_identical = abs(fit_info1['--' + name_of_the_norm] - fit_info2['--' + name_of_the_norm] ) < epsilon

      with open(str(target[0]), 'w') as log:
        if fits_are_identical:
          log.write('PASS: Fits are identical\n')
          return 0
        else:
          log.write('FAIL: Something wrong between the two fitting results\n')
          return 1
        #end_if_else
    else:
      print ('<<<ERROR>>> Requested Norm ' + name_of_the_norm + \
            'to compare  files '+ fit_filename1 + 'and' + fit_filename2 + 'does not exist. TEST FAILURE')
      return 1
    #end_if_else
  #end_def
  return cmp_fitting_files
#end_check_fitting_files



# Portability.
def library_search_path_variable():
  """
  Return the name of the search path environment variable for shared
  libraries.

  """
  if sys.platform.startswith('win'):
    return 'PATH'
  elif sys.platform.startswith('darwin'):
    return 'DYLD_LIBRARY_PATH'
  else:
    return 'LD_LIBRARY_PATH'

# Data files used by the tests.
test_file = File('Kirby2.dat').srcnode().abspath
test_data_directory = os.path.dirname(test_file)

# Directory for the files produced by the tests.
test_output_directory = Dir('#build/tests').abspath

def test_byproduct(file):
  """Return the absolute file name of FILE, a file produced by a test."""
  return test_output_directory + os.sep + file


def executable(file):
   '''Append '.exe' to FILE if needed.'''
   if sys.platform.startswith('win'):
      return file + '.exe'
   else:
      return file

def build_environment_variables():
  """
  Return the environment variables necessary when running tests.
  """
  envvars = os.environ.copy()
  envvars['TEST_DATA_DIRECTORY'] = test_data_directory
  envvars['PYTHONPATH'] = Dir('#build/python').abspath
  envvars['ALTA_PLUGIN_PATH'] = Dir('#build/plugins').abspath;

  libdir = Dir('#build/plugins').abspath
  lib_path_var = library_search_path_variable()
  lib_path = ""
  if lib_path_var in envvars and envvars[lib_path_var] != '':
    lib_path = libdir + os.pathsep + lib_path
  else:
    lib_path = libdir

  envvars[lib_path_var] = lib_path

  return envvars

# Inspired by <http://www.scons.org/wiki/UnitTests>.
def run_unit_test(env, target, source):
   program = str(source[0].abspath)
   envvars = build_environment_variables()

   with open(str(target[0]),'w') as log:
     if splitext(program)[1] == '.py':
       command = env['PYTHON'] + ' ' + program
       log.write(str(envvars) + '\n')
       if call([env['PYTHON'], program], env=envvars) == 0:
         log.write("PASS: " + command + "\n")
         return 0
       else:
         log.write("FAIL: " + command + "\n")
         return 1
     else:
       pipe = Popen([program], env = envvars,
                    stdout = log, stderr = STDOUT)
       pipe.wait()
       log.write('\n' + str(envvars) + '\n')
       if pipe.returncode == 0:
         log.write("PASS: " + program + "\n")
         return 0
       else:
         log.write("FAIL: " + program + "\n")
         return 1

def run_command(arguments):
  """Return a function that runs SOURCE with ARGUMENTS."""
  def do_run_command(env, target, source):
    program = str(source[0].abspath)
    envvars = build_environment_variables()

    with open(str(target[0]), 'w') as log:
      pipe = Popen([program] + arguments, env = envvars, \
                   stdout = log, stderr = STDOUT)
      pipe.wait()
      status = pipe.returncode
      command = ' '.join([program] + arguments)
      log.write('\n' + str(envvars) + '\n');
      if status == 0:
        log.write("PASS: '" + command + "' succeeded\n")
      else:
        log.write("FAIL: '" + command + "' returned " + str(status) + '\n')
        return 1

  return do_run_command

def run_dash_dash_help(env, target, source):
  """Run SOURCE with '--help'."""
  program = str(source[0].abspath)
  pipe = os.popen(program + " --help")

  seen_usage = False
  for line in pipe:
    if line.startswith('Usage: '):
      seen_usage = True

  status = pipe.close()
  if status == None:
    if seen_usage:
      with open(str(target[0]),'w') as log:
        log.write("PASS: congrats!\n")
      return 0
    else:
      with open(str(target[0]),'w') as log:
        log.write("FAIL: '" + program + "' lacks usage string\n")
      return 1
  else:
    with open(str(target[0]),'w') as log:
      log.write("FAIL: '" + program + " --help' returned "
                + str(status) + "\n")
    return 2

def make_cxx_test_alias(source):
  program = '#build/tests/' + splitext(basename(source))[0]
  command = env.Command(basename(program) + '.log',
                        executable(program),
                        run_unit_test)
  AlwaysBuild(command)
  env.Alias('tests', env.Program(program, source))
  env.Alias('tests', command)

def make_help_test_alias(program):
  """Add a test that checks the '--help' output of PROGRAM."""
  command = env.Command(basename(program) + '.help.log',
                        executable('#build/softs/' + program),
                        run_dash_dash_help)
  AlwaysBuild(command)
  env.Alias('tests', command)

def make_command_test(program, arguments, identifier):
  """Add a test that invokes PROGRAM with ARGUMENTS."""
  command = env.Command(basename(program) + '.' + identifier + '.log',
                      executable('#build/softs/' + program),
                      run_command(arguments))
  AlwaysBuild(command)
  env.Alias('tests', command);
  return command;

def make_test_python(script):
   command = env.Command(basename(splitext(script)[0])+ '.log',
                         script, run_unit_test)
   AlwaysBuild(command)
   env.Alias('tests', command)

UTILITIES = [ 'data2data', 'data2brdf', 'brdf2data', 'fit2stat',
              'brdf2brdf', 'brdf2data', 'brdf2gnuplot' ]

CXX_TESTS = [ 'core/half-test-1.cpp',
              'core/half-test-2.cpp',
              'core/half-test-3.cpp',
              'core/half-test-4.cpp',
              'core/params-test-1.cpp',
              'core/params-test-2.cpp',
              'core/data-io.cpp',
              'core/nonlinear-fit.cpp' ]

# Optionally, built the CppQuickCheck tests.
if have_cppquickcheck:
  CXX_TESTS += [ 'core/params-qc-1.cpp' ]
  env.AppendUnique(LIBS = ['cppqc'])


PYTHON_TESTS = [ 'python/test-arguments.py',
                 'python/test-vec.py',
                 'python/test-python-function.py']

for test in CXX_TESTS:
  make_cxx_test_alias(test)

for command in UTILITIES:
  make_help_test_alias(command)

if 'python' in COMMAND_LINE_TARGETS:
   for test in PYTHON_TESTS:
      make_test_python(test)


# Make sure commands from the tutorials actually work.

cmd1 = make_command_test('data2brdf', [ '--input', test_file, '--output',
                                        test_byproduct('Kirby.brdf'),
                                        '--fitter', 'rational_fitter_eigen' ],
                         'rational-fitter-eigen')

cmd2 = make_command_test('brdf2data', [ '--input',
                                        test_byproduct('Kirby.brdf'),
                                        '--output',
                                        test_byproduct('Kirby.dat'),
                                        '--data-file', test_file ],
                         'data-file')
env.Depends(cmd2, cmd1)         # 'Kirby.brdf' is created by CMD1

cmd3 = make_command_test('brdf2gnuplot', [ '--data-file', test_file,
                                           '--input',
                                           test_byproduct('Kirby.brdf'),
                                           '--output',
                                           test_byproduct('Kirby.dat') ],
                         'gnuplot-export')

env.Depends(cmd3, cmd1)         # 'Kirby.brdf' is created by CMD1

cmd4 = make_command_test('brdf2brdf', [ '--input',
                                        test_byproduct('Kirby.brdf'),
                                        '--output',
                                        test_byproduct('Kirby.m'),
                                        '--export', 'matlab' ],
                         'matlab-export')
env.Depends(cmd4, cmd1)         # 'Kirby.brdf' is created by CMD1

def download_gold_metallic_paint(target, source, env):
  url = 'http://people.csail.mit.edu/wojciech/BRDFDatabase/brdfs/gold-metallic-paint.binary'
  sha256 = '69c493d7f36fa5267d15948a616056f9bc84e352ec6db49b64afe6ff232e27d6'
  target = str(target[0])

  print ("downloading '" + target + "' from '" + url + "'")
  print ("this will take some time...")
  obtain.download(url, target)
  return obtain.check_integrity(target, sha256)

downloadGold = env.Command(test_output_directory + '/gold-metallic-paint.binary',
                           None, download_gold_metallic_paint)

def download_krylon_blue(target, source, env):
  url = 'http://www.graphics.cornell.edu/online/measurements/reflectance/spraypaints/krylon_blue_RGB.astm'
  sha256 = '17f18275fb7cb302786a883e8fda8666aa59ea0b21271fd6f8a9786c5f82a653'
  target = str(target[0])

  print( "downloading '" + target + "' from '" + url + "'")
  print( "this will take some time...")
  obtain.download(url, target)
  return obtain.check_integrity(target, sha256)

downloadKrylon = env.Command(test_output_directory + '/krylon_blue_RGB.astm',
                       None, download_krylon_blue)

# Prevent 'scons -c' from removing thse files since downloading it
# takes ages.
downloadGold.noclean   = True
downloadKrylon.noclean = True


# Test Some basic conversion from MERL to ALTA ...
cmd00 = make_command_test('data2data', ['--param RUSIN_TH_TD_PD',
                                        '--input', test_byproduct('gold-metallic-paint.binary'),
                                        '--in-data', 'data_merl',
                                        '--output', test_byproduct('gold-metallic-paint.alta'),
                                        '--all-values'],
                          'merl-to-alta-all-values')

env.Depends(cmd00, downloadGold)

# ... and from ALTA to ALTA using filtering
cmd01 = make_command_test('data2data', ['--input', test_byproduct('gold-metallic-paint.alta'),
                                         '--output', test_byproduct('gold-metallic-paint_positive_only.alta'),
                                         '--all-values', '--param RUSIN_TH_TD_PD', '--ymin [0.0, 0.0, 0.0]'],
                          'alta-to-alta-positive-values-only')

env.Depends(cmd01,cmd00)

# Convert from ALTA's text format to ALTA's binary format and back.
cmd02 = make_command_test('data2data',
                          ['--input',
                           test_byproduct('gold-metallic-paint.alta'),
                           '--output',
                           test_byproduct('gold-metallic-paint-all-values.alta-bin'),
                           '--out-data', 'alta-binary',
                           '--all-values'],
                          'alta-to-alta-binary')
env.Depends(cmd02, cmd00)

cmd03 = make_command_test('data2data',
                          ['--input',
                           test_byproduct('gold-metallic-paint-all-values.alta-bin'),
                           '--output',
                           test_byproduct('gold-metallic-paint2.alta'),
                           '--all-values'],
                          'alta-binary-to-alta')
env.Depends(cmd03, cmd02)

def check_that_files_are_identical(file1, file2):
  """Return a function that checks whether FILE1 and FILE2 are identical."""
  def compare_files(env, target, source):
    identical = filecmp.cmp(file1, file2)
    with open(str(target[0]), 'w') as log:
      if identical:
        log.write("PASS: '" + file1 + "' and '" + file2 + "' are identical\n")
      else:
        log.write("FAIL: '" + file1 + "' and '" + file2 + "' differ\n")
        return 1

  return compare_files

cmd04 = env.Command('data2data.alta-to-binary-to-alta.log',
                    test_byproduct('gold-metallic-paint2.alta'),
                    check_that_files_are_identical(test_byproduct('gold-metallic-paint.alta'),
                                                   test_byproduct('gold-metallic-paint2.alta')))

env.Depends(cmd04, cmd00)
env.Depends(cmd04, cmd03)

# Convert from MERL to ALTA's binary format.
cmd05 = make_command_test('data2data', ['--param RUSIN_TH_TD_PD',
                                        '--input', test_byproduct('gold-metallic-paint.binary'),
                                        '--in-data', 'data_merl',
                                        '--out-data', 'alta-binary',
                                        '--output', test_byproduct('gold-metallic-paint2.alta-bin'),
                                        '--all-values'],
                          'merl-to-alta-all-values-binary')
env.Depends(cmd05, downloadGold)


cmd06 = make_command_test('data2data',
                          ['--input',
                           test_byproduct('gold-metallic-paint2.alta-bin'),
                           '--output',
                           test_byproduct('gold-metallic-paint3.alta'),
                           '--all-values'],
                          'alta-binary-to-alta2')
env.Depends(cmd06, cmd05)

cmd07 = env.Command('data2data-merl-to-alta-binary-to-alta.log',
                    test_byproduct('gold-metallic-paint3.alta'),
                    check_that_files_are_identical(test_byproduct('gold-metallic-paint.alta'),
                                                   test_byproduct('gold-metallic-paint3.alta')))

env.Depends(cmd07, cmd00)
env.Depends(cmd07, cmd06)


# ADD C++ Test if the two previous tests have passed and if Catch submodule is available
if have_catch:
  CXX_CATCH_TESTS = ['core/conversion-catch-1.cpp']
  env.AppendUnique(CPPPATH = ['#external/Catch/single_include/'])

  for test in CXX_CATCH_TESTS:
    make_cxx_test_alias(test)
  #end_for_loop

#end_if_have_catch


if have_openexr:
  cmd5 = make_command_test('data2data',
                           ['--input',
                            test_byproduct('gold-metallic-paint.binary'),
                            '--in-data', 'data_merl',
                            '--output',
                            test_byproduct('gold-metallic-paint.exr'),
                            '--out-data', 'data_brdf_slice'],
                           'exr-export')
  env.Depends(cmd5, cmd1)
  env.Depends(cmd5, downloadGold)

  cmd6 = make_command_test('data2data',
                           ['--input',
                            test_byproduct('gold-metallic-paint.exr'),
                            '--in-data', 'data_brdf_slice',
                            '--output',
                            test_byproduct('gold-metallic-paint.data')],
                           'exr-to-internal')
  env.Depends(cmd6, cmd5)

  cmd7 = make_command_test('data2data',
                           ['--input',
                            test_byproduct('gold-metallic-paint.binary'),
                            '--in-data', 'data_merl',
                            '--param', 'RUSIN_TH_TD',
                            '--out-data', 'data_brdf_slice',
                            '--output',
                            test_byproduct('gold-metallic-paint.rusin.exr')],
                           'merl-to-data-slice-rusin')
  env.Depends(cmd7, downloadGold)

  cmd8 = make_command_test('data2data',
                           ['--input',
                            test_byproduct('gold-metallic-paint.binary'),
                            '--in-data', 'data_merl',
                            '--param', 'RUSIN_TH_TD_PD', '--angle', '90',
                            '--out-data', 'data_brdf_slice',
                            '--output',
                            test_byproduct('gold-metallic-paint.rusin.exr')],
                           'merl-to-data-slice-rusin3d')
  env.Depends(cmd8, downloadGold)

  #-------------------------------------------------------------------------------------------------
  # Rational Fitting Tests
  #-------------------------------------------------------------------------------------------------

  # Rational Fitting Tests in 2D
  cmd9 = make_command_test('data2brdf',
                           ['--input',
                            test_byproduct('gold-metallic-paint.data'),
                            '--output',
                            test_byproduct('gold-metallic-paint.brdf'),
                            '--func', 'rational_function_chebychev',
                            '--fitter', 'rational_fitter_leastsquare',
                            '--np', '100', '--nq', '50'],
                           'least-square-fit')
  env.Depends(cmd9, cmd6)


  # 1D Rational Fitting with Quadprog.  absolute interval set to 0.05
  test_1d_no_vs_file = test_data_directory + os.sep + 'Test_Smooth_Step_1d_no_vs.txt'

  if os.path.isfile(test_1d_no_vs_file):
    cmd90 = make_command_test('data2brdf',
                             ['--input',
                              test_1d_no_vs_file,
                              '--output',
                              test_byproduct('Test_Smooth_Step_1d_no_vs.func'),
                              '--fitter', 'rational_fitter_quadprog',
                              '--dt', '0.05',
                              '--min-np', '1', '--min-nq', '1',
                              '--np', '20', '--nq', '20'],
                             'rational-fit-1d-quadprog')


    abspath_to_fit_file1    = test_byproduct('Test_Smooth_Step_1d_no_vs.func')
    abspath_to_no_reg_file1 = test_data_directory + os.sep + 'non_reg_fit_Test_Smooth_Step_1d_no_vs.func'

    # A fitting results should always be equal to itself regardless of the norm
    cmd900 = env.Command( 'test_check_cmp_fitting_files.log',
                          abspath_to_fit_file1,
                          check_fitting_files( abspath_to_fit_file1,abspath_to_fit_file1 , 'Linf',1e-5))


    AlwaysBuild(cmd900)
    env.Alias('tests', cmd900)
    env.Depends(cmd900, cmd90)

    # # Comparisons of the fitting results with the expected and stored results (non-regression)
    cmd901 = env.Command( 'no_regress_rational-fit-1d-quadprog.log',
                          abspath_to_fit_file1,
                          check_fitting_files( abspath_to_fit_file1, abspath_to_no_reg_file1, 'Linf',1e-5))

    AlwaysBuild(cmd901)
    env.Alias('tests', cmd901)
    env.Depends(cmd901, cmd900)
  #if_end


  # 1D Rational Fitting with Quadprog.  Vertical Segment are symetric and read from input file
  test_1d_symetric_vs_file = test_data_directory + os.sep + 'Test_Smooth_Step_1d_pure_symetric_vs.txt'
  if os.path.isfile(test_1d_symetric_vs_file):
    cmd91 = make_command_test('data2brdf',
                             ['--input',
                              test_1d_symetric_vs_file,
                              '--output',
                              test_byproduct('Test_Smooth_Step_1d_symetric_vs.func'),
                              '--fitter', 'rational_fitter_quadprog',
                              '--min-np', '1', '--min-nq', '1',
                              '--np', '20', '--nq', '20'],
                             'rational-fit-1d-quadprog-symetric-vs')


    abspath_to_fit_file2 = test_byproduct('Test_Smooth_Step_1d_symetric_vs.func')

    # We check that the fitting results with VS from file Test_Smooth_Step_1d_pure_symetric_vs.txt
    # and fitting without VS but with --dt 0.5 are the same
    cmd911 = env.Command( 'no_regress_rational_1d_fit_vs_sym.log',
                          abspath_to_fit_file2,
                          check_fitting_files( abspath_to_fit_file1, abspath_to_fit_file2, 'Linf',1e-5))

    AlwaysBuild(cmd911)
    env.Depends(cmd911, cmd91)
    env.Alias('tests', cmd911)
  #if_end

  # 1D Rational Fitting with Quadprog.  Vertical Segment are Asymetric and read from input file
  test_1d_Asymetric_vs_file = test_data_directory + os.sep + 'Test_Smooth_Step_1d_Asymetric_vs.txt'
  if os.path.isfile(test_1d_Asymetric_vs_file):
    cmd92 = make_command_test('data2brdf',
                             ['--input',
                              test_1d_Asymetric_vs_file,
                              '--output',
                              test_byproduct('Test_Smooth_Step_1d_Asymetric_vs.func'),
                              '--fitter', 'rational_fitter_quadprog',
                              '--min-np', '1', '--min-nq', '1',
                              '--np', '20', '--nq', '20'],
                             'rational-fit-1d-quadprog-Asymetric-vs')


    abspath_to_fit_file3 = test_byproduct('Test_Smooth_Step_1d_Asymetric_vs.func')
    abspath_to_no_reg_file3 = test_data_directory + os.sep + 'non_reg_fit_Test_Smooth_Step_1d_Asymetric_vs.func'

    cmd921 = env.Command( 'no_regress_asymetric_vs_rational-fit-1d-quadprog.log',
                          abspath_to_fit_file3,
                          check_fitting_files( abspath_to_fit_file3, abspath_to_no_reg_file3, 'Linf',1e-5))

    AlwaysBuild(cmd921)
    env.Depends(cmd921, cmd92)
    env.Alias('tests', cmd921)
  #if_end

  #-------------------------------------------------------------------------------------------------
  # END of Rational Fitting Tests
  #-------------------------------------------------------------------------------------------------

  # if we have the m100_fabric140.exr we can verify that some conversions with UTIA DB are working
  UTIA_TEST_FILE = test_byproduct('m100_fabric140.exr')

  if os.path.isfile(UTIA_TEST_FILE):

    cmd_utia_idempotence = make_command_test('data2data',
                                             ['--input',
                                             test_byproduct('m100_fabric140.exr'),
                                              '--in-data', 'data_utia',
                                              '--out-data', 'data_merl',
                                              '--output',
                                              test_byproduct('m100_fabric140-3.exr')],
                                              'data2data-utia-to-utia')


    cmd_utia_1 = make_command_test('data2data',
                                   ['--input',
                                    test_byproduct('m100_fabric140.exr'),
                                    '--in-data', 'data_utia',
                                    '--out-data', 'data_merl',
                                    '--output',
                                    test_byproduct('m100_fabric140.binary')],
                                    'data2data-utia-to-merl')


    cmd_utia_2 = make_command_test('data2data',
                                   ['--input',
                                    test_byproduct('m100_fabric140.binary'),
                                    '--in-data', 'data_merl',
                                    '--out-data', 'data_utia',
                                    '--output',
                                    test_byproduct('m100_fabric140-2.exr')],
                                    'data2data-merl-to-utia')
    env.Depends(cmd_utia_2, cmd_utia_1)

    cmd_utia_check = make_command_test('data2stats',
                                       ['--input',
                                       test_byproduct('m100_fabric140-2.exr'),
                                        '--in-data', 'data_utia',
                                        '--ref',
                                        test_byproduct('m100_fabric140.exr'),
                                        '--ref-data', 'data_utia'],
                                        'data2stats-utia-check');

    env.Depends(cmd_utia_check, cmd_utia_2)

    #TODO PARSE THE OUTPUT of cmd_utia_check to see of the Linf norm is < 1e-5 if yes test passes
    # if not test fails
    #
    #log_output_directory = Dir('#build/sources/tests').abspath
    # log_file = File(log_output_directory + os.sep + 'data2stats.data2stats-utia-check.log').abspath
    # file_as_string = open(log_file, 'r').read()
    # per_lines =  file_as_string.split('<<INFO>>')
    # index = [i for i,x in enumerate(per_lines) if x.startswith(' Linf_norm')]
    # line_inf = per_lines[index[0]].split(' ')


  #end_if  UTIA No-Regression TEST
  else:
    print( "<<<WARNING>>> COULD NOT FIND m100_fabric140.exr !!! ")
    print( "<<<ERROR>>>   Download and put the file in:" + test_output_directory)
  #end_if_else



  if have_nonlinear_fitter_eigen:
    cmd10 = make_command_test('data2brdf',
                              ['--input',
                               test_byproduct('gold-metallic-paint.data'),
                               '--output',
                               test_byproduct('gold-metallic-paint2.brdf'),
                               '--func', '[nonlinear_function_diffuse, nonlinear_function_blinn]',
                               '--fitter', 'nonlinear_fitter_eigen'],
                              'nonlinear-eigen-fit')
    env.Depends(cmd10, cmd6)

    cmd11 = make_command_test('brdf2data',
                              ['--input',
                               test_byproduct('gold-metallic-paint2.brdf'),
                               '--output',
                               test_byproduct('gold-metallic-paint2.data'),
                               '--data-file',
                               test_byproduct('gold-metallic-paint.data'),
                               '--data', 'vertical_segment'],
                              'compound-function-to-vs')
    env.Depends(cmd11, cmd10)
    env.Depends(cmd11, cmd6)


#end_of_if_have_exr


cmd20 = make_command_test('data2data',
                         ['--input',
                          test_byproduct('krylon_blue_RGB.astm'),
                          '--in-data', 'data_astm',
                          '--output',
                          test_byproduct('krylon.alta')],
                         'cornell-to-vs')
env.Depends(cmd20, downloadKrylon)



#=======================================================================================================================
#
# 1D Rational Fitting with Quadprog and Kirby2.dat for different scheduling stategies
#
# Non Regression Files: nonreg_fit_kirby2_qp_worstfirst.txt and nonreg_fit_kirby2_qp_slidingwindows.txt
# nonreg_fit_kirby2_qp_slidingwindows.txt
#
#
#  Theses tests depends on : test_file is Kirby2.dat
#                             Rational fitter plugins (eigen and quadprob and least-square)
#=======================================================================================================================
if os.path.isfile(test_file):

  cmd100 = make_command_test('data2brdf',
                             ['--input',
                              test_file,
                              '--output',
                              test_byproduct('Test_fit_kirby2_qp_slidingwindows.func'),
                              '--fitter', 'rational_fitter_quadprog',
                              '--scheduling-mode', 'SlidingWindows'
                              '--min-np', '10', '--min-nq', '10',
                              '--np', '10', '--nq', '10'],
                             'rational-fit-1d-quadprog-kirby2-slidingwindows')


  abspath_to_fit_file_100 = test_byproduct('Test_fit_kirby2_qp_slidingwindows.func')
  abspath_to_no_reg_file_100 = test_data_directory + os.sep + 'nonreg_fit_kirby2_qp_slidingwindows.txt'


  cmd101 = env.Command( 'no_regress scheduling windows rational-fit-1d-quadprog.log',
                        abspath_to_fit_file_100,
                        check_fitting_files( abspath_to_fit_file_100, abspath_to_no_reg_file_100, 'Linf',1e-5))

  env.Depends(cmd101, cmd100)
  env.Alias('tests', cmd101)




  cmd110 = make_command_test('data2brdf',
                             ['--input',
                              test_file,
                              '--output',
                              test_byproduct('Test_fit_kirby2_qp_worstsetfirst.func'),
                              '--fitter', 'rational_fitter_quadprog',
                              '--scheduling-mode', 'WorstSetFirst'
                              '--min-np', '10', '--min-nq', '10',
                              '--np', '10', '--nq', '10'],
                             'rational-fit-1d-quadprog-kirby2-worstsetfirst')


  abspath_to_fit_file_110 = test_byproduct('Test_fit_kirby2_qp_worstsetfirst.func')
  abspath_to_no_reg_file_111 = test_data_directory + os.sep + 'nonreg_fit_kirby2_qp_worstsetfirst.txt'


  cmd111 = env.Command( 'no_regress scheduling worst set first rational-fit-1d-quadprog.log',
                        abspath_to_fit_file_100,
                        check_fitting_files( abspath_to_fit_file_110, abspath_to_no_reg_file_111, 'Linf',1e-5))

  env.Depends(cmd111, cmd110)
  env.Alias('tests', cmd111)


  cmd120 = make_command_test('data2brdf',
                             ['--input',
                              test_file,
                              '--output',
                              test_byproduct('Test_fit_kirby2_qp_worstfirst.func'),
                              '--fitter', 'rational_fitter_quadprog',
                              '--min-np', '10', '--min-nq', '10',
                              '--np', '10', '--nq', '10'],
                             'rational-fit-1d-quadprog-kirby2-worstfirst')


  abspath_to_fit_file_110 = test_byproduct('Test_fit_kirby2_qp_worstfirst.func')
  abspath_to_no_reg_file_111 = test_data_directory + os.sep + 'nonreg_fit_kirby2_qp_worstfirst.txt'


  cmd121 = env.Command( 'no_regress scheduling worst first rational-fit-1d-quadprog.log',
                        abspath_to_fit_file_100,
                        check_fitting_files( abspath_to_fit_file_110, abspath_to_no_reg_file_111, 'Linf',1e-5))

  env.Depends(cmd121, cmd120)
  env.Alias('tests', cmd121)

#endif_if Kirby2.dat is available

# Print a summary of the tests.

def display_test_name(node):
  print ("    " + os.path.basename(node.get_abspath()))

tests_node = env.Alias('tests', cmd20)
tests = tests_node[0].children()

tests_actually_run = filter(lambda n: n.get_abspath().endswith(".log"),
                            tests)

print ("")
print ("  The following test logs will be produced:")
list(map(display_test_name, tests_actually_run))
print ("")

# Always run all the tests upon 'scons tests'.
AlwaysBuild("tests")
